apply plugin: 'maven-publish'
apply plugin: 'signing'

File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(localPropsFile))
    props.each {name, value ->
        ext[name] = value
        println "local.properties: name = $name, value = $value"
    }
} else {
    println "local.properties does not exits"
    return
}

println "GAV = $GROUPID:$ARTIFACTID:$VERSION"

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.source
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        Library(MavenPublication) {
            //组件GVA坐标
            groupId GROUPID
            artifactId ARTIFACTID
            version VERSION
            //要发布的产物
            artifact "$buildDir/outputs/aar/${project.getName()}-release.aar"
            artifact sourcesJar
            artifact javadocJar
            //要生成的pom文件
            pom {
                name = ARTIFACTID
                description = project.hasProperty('DESCRIPTION') ? "$DESCRIPTION" : ''
                url = project.hasProperty('URL') ? "$URL" : ''
                licenses {
                    license {
                        name = project.hasProperty('LICENSENAME') ? "$LICENSENAME" : 'The Apache License, Version 2.0'
                        url = project.hasProperty('LICENSEURL') ? "$LICENSEURL" : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                //开发者信息
                developers {
                    developer {
                        name = project.hasProperty('DEVELOPERNAME') ? "$DEVELOPERNAME" : ''
                        email = project.hasProperty('DEVELOPEREMAIL') ? "$DEVELOPEREMAIL" : ''
                    }
                }
                //版本控制仓库地址
                scm {
                    url = project.hasProperty('SCMURL') ? "$SCMURL" : ''
                    connection = "scm:${project.hasProperty('SCMCONNECTION') ? "$SCMCONNECTION" : ''}"
                    developerConnection = "scm:${project.hasProperty('SCMDEVELOPERCONNECTION') ? "$SCMDEVELOPERCONNECTION" : ''}"
                }
                //生成组件的依赖关系
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.all { configuration ->
                        def name = configuration.name
                        if (name != "implementation" && name != "compile" && name != "api") {
                            return
                        }
                        configuration.dependencies.each {
                            if (it.name == "unspecified") {
                                return
                            }
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (name == "api" || name == "compile") {
                                dependencyNode.appendNode("scope", "compile")
                            } else { // implementation
                                dependencyNode.appendNode("scope", "runtime")
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = VERSION.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            println "mavenUrl = $url"
            credentials {
                username OSSRHUSERNAME
                password OSSRHPASSWORD
            }
        }
    }
}

signing {
    //对每个输出进行签名
    sign publishing.publications
}