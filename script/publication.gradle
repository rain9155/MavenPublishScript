def helper = new Helper(project)

if(helper.isCheckPass){
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'utf-8')
        options.addStringOption('charSet', 'utf-8')
    }

    if(helper.isJavaLibrary()){
        java{
            withJavadocJar()
            withSourcesJar()
        }
    }

    //maven仓库地址
    publishing.repositories{
        maven {
            url = helper.getMavenUrl()
            credentials {
                def credentials = helper.getCredentials()
                username credentials[0]
                password credentials[1]
            }
        }
    }

    //定义发布过程
    publishing.publications{
        if(helper.isAndroidLibrary()){
            def isAGPGreaterEqual360 = helper.getAGPVersion() >= '3.6.0'
            android.libraryVariants.all{variant ->
                if('release' != variant.buildType.name){
                    return
                }
                def flavorName = variant.flavorName
                def variantName = "${flavorName}Release"
                helper.log "variant = ${variantName}"
                "${flavorName}Androidlib"(MavenPublication) {
                    //组件GVA坐标
                    def gav = helper.getGAV(variant)
                    groupId gav[0]
                    artifactId gav[1]
                    version gav[2]
                    //要发布的产物
                    artifact helper.createSourcesJar(variant)
                    artifact helper.createJavadocJar(variant)
                    if(isAGPGreaterEqual360){
                        from components."${variantName}"
                    }else{
                        artifact helper.getReleaseOutput(variant)
                    }
                    //要生成的pom文件
                    pom {
                        packaging = 'aar'
                        //组件的基本信息
                        def baseInfo = helper.getBaseInfo()
                        name = baseInfo[0]
                        description = baseInfo[1]
                        url = baseInfo[2]
                        //licenses文件
                        licenses {
                            license {
                                def license = helper.getLicense()
                                name = license[0]
                                url = license[1]
                            }
                        }
                        //开发者信息
                        developers {
                            developer {
                                def developer = helper.getDeveloper()
                                name = developer[0]
                                email = developer[1]
                            }
                        }
                        //版本控制仓库地址
                        scm {
                            def scm = helper.getScm()
                            url = scm[0]
                            connection = scm[1]
                            developerConnection = scm[2]
                        }
                        if(!isAGPGreaterEqual360){
                            //生成组件的依赖关系
                            helper.appendDependenciesToPom(variant, it)
                        }
                    }
                }
            }
        }else if(helper.isJavaLibrary()){
            "Javalib"(MavenPublication) {
                def gav = helper.getGAV()
                groupId gav[0]
                artifactId gav[1]
                version gav[2]
                from components.java
                pom {
                    packaging = 'jar'
                    def baseInfo = helper.getBaseInfo()
                    name = baseInfo[0]
                    description = baseInfo[1]
                    url = baseInfo[2]
                    licenses {
                        license {
                            def license = helper.getLicense()
                            name = license[0]
                            url = license[1]
                        }
                    }
                    developers {
                        developer {
                            def developer = helper.getDeveloper()
                            name = developer[0]
                            email = developer[1]
                        }
                    }
                    scm {
                        def scm = helper.getScm()
                        url = scm[0]
                        connection = scm[1]
                        developerConnection = scm[2]
                    }
                }
            }
        }
    }

    //对每个输出进行签名
    signing {
        sign publishing.publications
    }
}

class Helper{

    private static def TAG = 'MavenPublishScript'

    private def signingKeyId = 'signing.keyId'
    private def signingPassword = 'signing.password'
    private def signingSecretKeyRingFile = 'signing.secretKeyRingFile'
    private def ossrhUsername = 'ossrh.username'
    private def ossrhPassword = 'ossrh.password'
    private Project project

    def isCheckPass = false

    Helper(Project p){
        this.project = p
        this.isCheckPass = check()
    }

    static def isEmpty(String string){
        return string == null || string.isEmpty()
    }

    def getMavenUrl(){
        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        return readProperty('VERSION').endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }

    def getCredentials(){
        def credentials = new String[2]
        credentials[0] = readProperty(ossrhUsername)
        credentials[1] = readProperty(ossrhPassword)
        return credentials
    }

    def getGAV(variant){
        def gav = new String[3]
        gav[0] = readProperty('GROUPID')
        gav[2] = readProperty('VERSION')
        if(variant == null){
            gav[1] = readProperty('ARTIFACTID')
        }else{
            gav[1] = readBoolean('APPENDFLAVORNAME')
                    ? (readProperty('ARTIFACTID') + "-${variant.flavorName}")
                    : readProperty('ARTIFACTID')
        }
        return gav
    }

    def getScm(){
        def scm = new String[3]
        scm[0] = readProperty('SCMURL')
        scm[1] = readProperty('SCMCONNECTION')
        scm[2] = readProperty('SCMDEVELOPERCONNECTION')
        return scm
    }

    def getDeveloper(){
        def developer = new String[2]
        developer[0] = readProperty('DEVELOPERNAME')
        developer[1] = readProperty('DEVELOPEREMAIL')
        return developer
    }

    def getLicense(){
        def license = new String[2]
        license[0] = readProperty('LICENSENAME')
        license[1] = readProperty('LICENSEURL')
        return license
    }

    def getBaseInfo(){
        def baseInfo = new String[3]
        baseInfo[0] = readProperty('ARTIFACTID')
        baseInfo[1] = readProperty('DESCRIPTION')
        baseInfo[2] = readProperty('URL')
        return baseInfo
    }

    def createSourcesJar(variant){
        def name
        if(variant == null){
            name = 'sourcesJar'
        }else{
            def flavorName = variant.flavorName
            name = "${flavorName}${isEmpty(flavorName) ? 's' : 'S'}ourcesJar"
        }
        return project.tasks.create(name, Jar){
            archiveClassifier = 'sources'
            from getSrcDirs(variant)
            exclude "**/R.java", "**/BuildConfig.java"
        }
    }

    def createJavadocJar(variant){
        def name
        if(variant == null){
            name = 'javadocJar'
        }else{
            def flavorName = variant.flavorName
            name = "${flavorName}${isEmpty(flavorName) ? 'j' : 'J'}avadocJar"
        }
        def javadoc = maybeCreateJavadoc(variant)
        return project.tasks.create(name, Jar){
            archiveClassifier = 'javadoc'
            dependsOn javadoc
            from javadoc.destinationDir
        }
    }

    def getReleaseOutput(variant){
        def result = findBundle(variant)
        if(result == null){
            if(variant == null){
                result = "${project.buildDir}/libs/${project.getName()}.jar"
            }else {
                result = "${project.buildDir}/outputs/aar/${project.getName()}-${variant.flavorName}-release.aar"
            }
        }
        return result
    }

    def appendDependenciesToPom(variant, mavenPom){
        def closure = {
            withXml{
                log 'appendDependenciesToPom...'
                def dependenciesNode = asNode().appendNode('dependencies')
                def runtimeClasspath = getRuntimeClasspath(variant)
                def resolvedDependencies = [:]
                //获取组件解析后的直接依赖
                runtimeClasspath.resolvedConfiguration.firstLevelModuleDependencies.each{resolvedDependency ->
                    def group = resolvedDependency.moduleGroup
                    def name = resolvedDependency.moduleName
                    def version = resolvedDependency.moduleVersion
                    log "resolvedDependency = ${group}:${name}:${version}"
                    if(version != 'unspecified'){
                        resolvedDependencies["${group}:${name}"] = version
                    }
                }
                def runtimeConfigurations = new HashSet<>()
                resolveConfigurations([runtimeClasspath], runtimeConfigurations)
                //把依赖写入pom文件
                runtimeConfigurations.each{configuration ->
                    configuration.dependencies.each{dependency ->
                        def group = dependency.group
                        def name = dependency.name
                        def version = dependency.version
                        def configurationName = configuration.name.toLowerCase()
                        log "dependency = ${configurationName} ${group}:${name}:${version}"
                        String key = "${group}:${name}"
                        if(resolvedDependencies.containsKey(key)){
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', group)
                            dependencyNode.appendNode('artifactId', name)
                            dependencyNode.appendNode('version', resolvedDependencies[key])
                            //避免重复写入依赖
                            resolvedDependencies.remove(key)
                            if(configurationName.indexOf("implementation") != -1
                                    || configurationName.indexOf("runtime") != -1
                            ){
                                dependencyNode.appendNode("scope", "runtime")
                            } else {
                                dependencyNode.appendNode("scope", "compile")
                            }
                            //写入依赖的exclude
                            def excludeRules = new HashSet(configuration.excludeRules)
                            excludeRules.addAll(dependency.excludeRules)
                            if(configuration.transitive == false || dependency.transitive == false || excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                if (configuration.transitive == false || dependency.transitive == false) {
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', '*')
                                    exclusionNode.appendNode('artifactId', '*')
                                } else {
                                    for (def excludeRule: excludeRules) {
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', excludeRule.group == null ? '*' : excludeRule.group)
                                        exclusionNode.appendNode('artifactId', excludeRule.module == null ? '*' : excludeRule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        closure.delegate = mavenPom
        closure.call()
    }

    def getAGPVersion() {
        def version
        def agpDependency = project.rootProject.buildscript?.configurations?.findByName(ScriptHandler.CLASSPATH_CONFIGURATION)?.incoming?.dependencies?.find {
            it.group == "com.android.tools.build" && it.name == "gradle"
        }
        if(agpDependency != null){
            version = agpDependency.version
        }else {
            Class<?> gradleVersionClazz = project.plugins.getPlugin('com.android.library').class.getClassLoader().loadClass('com.android.builder.model.Version')
            version = (String) gradleVersionClazz.getDeclaredField('ANDROID_GRADLE_PLUGIN_VERSION').get(null)
        }
        return version
    }

    def isAndroidLibrary(){
        return project.plugins.hasPlugin('com.android.library')
    }

    def isJavaLibrary(){
        return project.plugins.hasPlugin('java-library') || project.plugins.hasPlugin('java')
    }

    def log(String msg){
        project.logger.log(LogLevel.LIFECYCLE, "${TAG}: ${msg}")
    }

    def logError(String msg){
        project.logger.log(LogLevel.ERROR, "${TAG}: ${msg}")
    }

    def readProperty(String key){
        return project.hasProperty(key) ? project[key] : ''
    }

    def containProperty(String key){
        return project.properties.containsKey(key)
    }

    def readBoolean(String key){
        return readProperty(key).toLowerCase() == 'true'
    }

    private def isSupportPublish(){
        return isAndroidLibrary() || isJavaLibrary()
    }

    private def getRuntimeClasspath(variant){
        def runtimeClasspath
        try {
            runtimeClasspath = variant.variantData.variantDependencies.runtimeClasspath
        } catch (Exception e) {
            logError "getRuntimeClasspath: e = ${e.message}"
            runtimeClasspath = variant.variantData.variantDependency.runtimeClasspath
        }
        return runtimeClasspath
    }

    private def resolveConfigurations(Collection<Configuration> configurations, Set<Configuration> resolvedConfigurations) {
        configurations.each {
            resolvedConfigurations.add(it)
            resolveConfigurations(it.extendsFrom, resolvedConfigurations)
        }
    }

    private def findBundle(variant){
        def bundle
        if(variant == null){
            bundle = project.tasks.findByName("jar")
        }else{
            bundle = project.tasks.findByName("bundle${variant.flavorName.capitalize()}Release")
            if(bundle == null){
                bundle = project.tasks.findByName("bundle${variant.flavorName.capitalize()}ReleaseAar")
            }
        }
        return bundle
    }

    private def maybeCreateJavadoc(variant){
        def javadoc = project.tasks.findByName('javadoc')
        if(javadoc != null){
            return javadoc
        }else{
            def name
            if(variant == null){
                name = 'javadoc'
            }else{
                def flavorName = variant.flavorName
                name = "${flavorName}${isEmpty(flavorName) ? 'j' : 'J'}avadoc"
            }
            return project.tasks.create(name, Javadoc){
                failOnError false
                source getSrcDirs(variant)
                classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
                classpath += getJavaClasspath(variant)
                exclude '**/R.java', '**/BuildConfig.java'
            }
        }
    }

    private def getJavaClasspath(variant){
        def javaClasspath
        try {
            javaClasspath = variant.javaCompileProvider.get().classpath
        }catch(Exception e){
            logError "getJavaClasspath: e = ${e.message}"
            javaClasspath = variant.javaCompile.classpath
        }
        return javaClasspath
    }

    private def getSrcDirs(variant){
        def srcDirs
        if(variant == null){
            srcDirs = project.sourceSets.main.allSource
        }else {
            try {
                srcDirs = variant.variantData.variantSources.sortedSourceProviders.collect {
                    it.getJavaDirectories()
                }
            } catch (Exception e) {
                logError "getSrcDirs: e = ${e.message}"
                srcDirs = variant.variantData.javaSources.collect {
                    it.getDir()
                }
            }
            if(srcDirs == null){
                srcDirs = new HashSet<File>()
                srcDirs.addAll(project.android.sourceSets.main.java.srcDirs)
                srcDirs.addAll(project.android.sourceSets.release.java.srcDirs)
                if(!isEmpty(variant.flavorName)){
                    srcDirs.addAll(project.android.sourceSets."${variant.flavorName}".java.srcDirs)
                    srcDirs.addAll(project.android.sourceSets."${variant.flavorName}Release".java.srcDirs)
                }
            }
        }
        return srcDirs
    }

    private def loadLocalProperties(){
        File localPropsFile = project.rootProject.file('local.properties')
        if (localPropsFile.exists()) {
            Properties props = new Properties()
            props.load(new FileInputStream(localPropsFile))
            props.each {name, value ->
                project.ext[name] = value
            }
            return true
        } else {
            return false
        }
    }

    private def check(){
        if(!isSupportPublish()){
            logError '目前只支持android工程和java工程的组件发布，暂不支持其他平台的组件发布'
            return false
        }else if(isAndroidLibrary()){
            log "项目是一个android工程"
            def version = getAGPVersion()
            if(version < '3.0.0'){
                logError '请升级android gradle pulgin版本, 不支持3.0.0以下的版本'
                return false
            }else{
                log "AGP version = ${version}"
            }
        }else if(isJavaLibrary()){
            log '项目是一个java工程'
        }

        if(!loadLocalProperties()){
            logError '项目根目录下local.properties文件不存在'
            return false
        }else{
            if(!containProperty(signingKeyId)
                    || !containProperty(signingPassword)
                    || !containProperty(signingSecretKeyRingFile)
            ){
                logError 'gpg的签名信息不可以为空'
                return false
            }else{
                log "signingKeyId = ${readProperty(signingKeyId)}"
                log "signingPassword = ${readProperty(signingPassword)}"
                log "signingSecretKeyRingFile = ${readProperty(signingSecretKeyRingFile)}"
            }
            if(!containProperty(ossrhUsername)
                    || !containProperty(ossrhPassword)
            ){
                logError 'ossrh的账号信息不可以为空'
                return false
            }else{
                log "ossrhUsername = ${readProperty(ossrhUsername)}"
                log "ossrhPassword = ${readProperty(ossrhPassword)}"
            }
        }

        def gav = getGAV()
        if(isEmpty(gav[0])
                || isEmpty(gav[1])
                || isEmpty(gav[2])
        ){
            logError '组件的GAV不可以为空'
            return false
        }else{
            log "GAV = ${gav[0]}:${gav[1]}:${gav[2]}"
        }

        return true
    }
}
